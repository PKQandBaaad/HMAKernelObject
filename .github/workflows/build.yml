name: Build HMAKernelObject

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  MODULE_NAME: hma_ko
  MODULE_SRC: hma_ko.c
  OUT_DIR: out

jobs:
  build-gki:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - gki_name: android12-5.10
            manifest_ref: android12-5.10
          - gki_name: android13-5.10
            manifest_ref: android13-5.10
          - gki_name: android13-5.15
            manifest_ref: android13-5.15
          - gki_name: android14-5.15
            manifest_ref: android14-5.15
          - gki_name: android14-6.1
            manifest_ref: android14-6.1
          - gki_name: android15-6.6
            manifest_ref: android15-6.6
          - gki_name: android16-6.12
            manifest_ref: android16-6.12

    steps:
      - uses: actions/checkout@v4

      - name: Setup
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget build-essential bison flex bc libncurses-dev
          curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo
          sudo chmod a+x /usr/local/bin/repo

      - name: Android kernel
        env:
          MANIFEST_REF: ${{ matrix.manifest_ref }}
          KERNEL_WS: ${{ github.workspace }}/kernel-${{ matrix.gki_name }}
          OUTROOT: ${{ github.workspace }}/out/${{ matrix.gki_name }}
          X86_64_CROSS: ""
          X86_CROSS: "i686-linux-gnu-"
          ARM_CROSS: "arm-linux-gnueabihf-"
          ARM64_CROSS: "aarch64-linux-gnu-"
        run: |
          set -euo pipefail
          mkdir -p "${KERNEL_WS}"
          cd "${KERNEL_WS}"
          repo init -u https://android.googlesource.com/kernel/manifest -b "${MANIFEST_REF}"
          repo sync -j4 --no-tags --no-clone-bundle

          mkdir -p "${OUTROOT}"
          cd "${KERNEL_WS}"

          MOD_SRC="${{ github.workspace }}"
          ARCHS="x86_64 x86 arm arm64"

          build_one() {
            ARCH=$1
            CROSS=$2
            BUILD_DIR="${KERNEL_WS}"
            OUTDIR="${OUTROOT}/${ARCH}"
            mkdir -p "${OUTDIR}"
            echo "BUILD-START ${matrix.gki_name} ${ARCH}"
            make -C "${BUILD_DIR}" ARCH=${ARCH} CROSS_COMPILE=${CROSS} modules_prepare -j$(nproc) || return 2
            make -C "${BUILD_DIR}" M="${MOD_SRC}" ARCH=${ARCH} CROSS_COMPILE=${CROSS} modules -j$(nproc) || return 3
            if [ -f "${MOD_SRC}/${MODULE_NAME}.ko" ]; then
              cp "${MOD_SRC}/${MODULE_NAME}.ko" "${OUTDIR}/${MODULE_NAME}-${ARCH}.ko"
            else
              find "${MOD_SRC}" -maxdepth 1 -type f -name "${MODULE_NAME}*.ko" -exec cp {} "${OUTDIR}/" \; || true
            fi
            make -C "${BUILD_DIR}" M="${MOD_SRC}" ARCH=${ARCH} CROSS_COMPILE=${CROSS} clean || true
            echo "BUILD-SUCCESS ${matrix.gki_name} ${ARCH}"
            return 0
          }

          declare -A pids
          declare -A arch_logs
          for a in ${ARCHS}; do
            case "${a}" in
              x86_64) cross="${X86_64_CROSS}" ;;
              x86)    cross="${X86_CROSS}" ;;
              arm)    cross="${ARM_CROSS}" ;;
              arm64)  cross="${ARM64_CROSS}" ;;
            esac
            log="${OUTROOT}/${a}.log"
            arch_logs[${a}]="${log}"
            (
              build_one "${a}" "${cross}"
            ) >"${log}" 2>&1 &
            pids[${a}]=$!
            echo "Started ${a} pid=${pids[${a}]}"
          done

          declare -A exitcodes
          for a in ${ARCHS}; do
            pid=${pids[${a}]}
            wait "${pid}" || true
            rc=$?
            exitcodes[${a}]=$rc
            echo "Arch ${a} finished with exit code ${rc}"
          done

          echo "Build summary for ${matrix.gki_name}:" > "${OUTROOT}/summary.txt"
          for a in ${ARCHS}; do
            rc=${exitcodes[${a}]}
            echo "${a}: ${rc}" >> "${OUTROOT}/summary.txt"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hmako-${{ matrix.gki_name }}
          path: out/${{ matrix.gki_name }}/**

